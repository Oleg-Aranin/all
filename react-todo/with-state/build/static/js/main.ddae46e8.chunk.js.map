{"version":3,"sources":["components/AppHeader/AppHeader.js","components/SearchPanel/SearchPanel.js","components/TodoList/EditTodoListItem/EditTodoListItem.js","components/TodoList/TodoListItem/TodoListItem.js","components/TodoList/TodoList.js","components/ItemStatusFilter/ItemStatusFilter.js","components/ItemAddForm/ItemAddForm.js","App.js","serviceWorker.js","index.js"],"names":["toDo","done","className","props","type","placeholder","value","term","onChange","onTermChange","editTodoItemValue","onEditChange","id","item","filter","label","TodoListItem","important","edit","onToggleImportant","onToggleDone","onDelete","onEdit","classNames","labelOrEdit","onClick","TodoList","items","elements","map","itemProps","key","e","filterButtons","name","ItemStatusFilter","onFilterChange","buttons","onSubmit","onLabelChange","App","maxId","state","search","itemAddFormLabel","searchPanelTerm","setState","target","onSearchChange","preventDefault","onItemAdded","createItem","toggleProperty","arr","propName","idx","findIndex","slice","this","length","toLowerCase","indexOf","doneCount","toDoCount","visibleItems","searchItems","filterItems","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddae46e8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AppHeader.css'\r\n\r\nexport default ({toDo, done}) => (\r\n  <div className='AppHeader d-flex' >\r\n     <h1>Todo List</h1>\r\n     <h2>{toDo} more to do, {done} done</h2>\r\n   </div>\r\n)\r\n","import React from 'react'\r\nimport './SearchPanel.css'\r\n\r\nexport default props => (\r\n      <input type=\"text\"\r\n             className='form-control searchInput'\r\n             placeholder=\"type to search\"\r\n             value={props.term}\r\n             onChange={ props.onTermChange } />\r\n    )\r\n","import React from 'react'\r\nimport './EditTodoListItem.css'\r\n\r\nexport default ({editTodoItemValue, onEditChange, id}) => {\r\n\r\n let item = editTodoItemValue.filter(item => item.id === id)\r\n  return (\r\n    <input\r\n    type=\"text\"\r\n    className='form-control newTodoLabel EditTodoListItem'\r\n    value={item[0].label}\r\n    onChange={onEditChange} />\r\n)}\r\n","import React from 'react'\r\nimport './TodoListItem.css'\r\nimport EditTodoListItem from '../EditTodoListItem/EditTodoListItem'\r\n\r\n\r\n\r\n\r\nconst TodoListItem = ({ important, done,\r\n      label, edit, onToggleImportant, onToggleDone, onDelete, onEdit, onEditChange, editTodoItemValue, id }) => {\r\n\r\n  let classNames = 'TodoListItem'\r\n  if (important) {\r\n    classNames += ' important'\r\n  }\r\n\r\n  if (done) {\r\n    classNames += ' done'\r\n  }\r\n\r\n  let labelOrEdit = <span\r\n    className=\"TodoListItemLabel\"\r\n    onClick={onToggleDone}>{label}</span>\r\n\r\n  if (edit) {\r\n    labelOrEdit = <EditTodoListItem  onEditChange={onEditChange} editTodoItemValue={editTodoItemValue} id={id}/>\r\n  }\r\n\r\n\r\n  return (\r\n    <span className={classNames}>\r\n\r\n         { labelOrEdit }\r\n\r\n      <button type=\"button\"\r\n              className=\"btn btn-outline-success btn-sm float-right\"\r\n              onClick={onToggleImportant}>\r\n        <i className=\"fa fa-exclamation\"></i>\r\n      </button>\r\n\r\n      <button type=\"button\"\r\n              className=\"btn btn-outline-danger btn-sm float-right\"\r\n              onClick={onDelete}>\r\n        <i className=\"fa fa-trash-o\"></i>\r\n      </button>\r\n\r\n      <button type=\"button\"\r\n              className=\"btn btn-outline-danger btn-sm float-right btn-save\"\r\n              onClick={onEdit}>\r\n\r\n        { edit ? <span className='save'>save</span> : <i className=\"fa fa-pencil-square\"></i> }\r\n\r\n      </button>\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default TodoListItem\r\n","import React from 'react'\r\nimport TodoListItem from './TodoListItem/TodoListItem'\r\nimport './TodoList.css'\r\n\r\nconst TodoList = ({ items, onToggleImportant, onToggleDone, onDelete, onEdit, onEditChange, editTodoItemValue }) => {\r\n\r\n  const elements = items.map((item) => {\r\n    const { id, ...itemProps } = item\r\n    return (\r\n      <li key={id} className=\"list-group-item\">\r\n        <TodoListItem\r\n          { ...itemProps }\r\n          onToggleImportant={ () => onToggleImportant(id) }\r\n          onToggleDone={ () => onToggleDone(id) }\r\n          onDelete={ () => onDelete(id) }\r\n          onEdit={ () => onEdit(id) }\r\n          onEditChange={ (e) => onEditChange(e, id)}\r\n          editTodoItemValue={editTodoItemValue}\r\n          id={id}/>\r\n      </li>\r\n    )\r\n  })\r\n\r\n  return (<ul className='TodoList list-group'>{ elements }</ul>)\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\n\r\nconst filterButtons = [\r\n  { name: 'all', label: 'All' },\r\n  { name: 'active', label: 'Active' },\r\n  { name: 'done', label: 'Done' }\r\n]\r\n\r\nconst ItemStatusFilter = ({filter, onFilterChange = () => {}}) => {\r\n\r\n  const buttons = filterButtons.map(({name, label}) => {\r\n    const isActive = name === filter\r\n    const classNames = 'btn ' + (isActive ? 'btn-info' : 'btn-outline-secondary')\r\n\r\n    return (\r\n      <button key={name}\r\n              type=\"button\"\r\n              onClick={() => onFilterChange(name)}\r\n              className={classNames}>{label}</button>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      { buttons }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ItemStatusFilter\r\n","import React from 'react'\r\nimport './ItemAddForm.css'\r\n\r\nexport default props =>(\r\n      <form\r\n        className='bottomPanel d-flex'\r\n        onSubmit={props.onSubmit}>\r\n\r\n        <input type=\"text\"\r\n               className='form-control newTodoLabel'\r\n               value={props.label}\r\n               onChange={props.onLabelChange}\r\n               placeholder=\"What needs to be done?\" />\r\n\r\n        <button type=\"submit\"\r\n                className=\"btn btn-outline-secondary\">Add</button>\r\n      </form>\r\n    )\r\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport AppHeader from './components/AppHeader/AppHeader'\nimport SearchPanel from './components/SearchPanel/SearchPanel'\nimport TodoList from './components/TodoList/TodoList'\nimport ItemStatusFilter from './components/ItemStatusFilter/ItemStatusFilter'\nimport ItemAddForm from './components/ItemAddForm/ItemAddForm'\n\n\n\n\nexport default class App extends Component {\n\n  maxId = 100\n\n  state = {\n    items: [\n      { id: 1, label: 'Drink Coffee', important: false, done: false, edit: false },\n      { id: 2, label: 'Learn React', important: true, done: false, edit: false },\n      { id: 3, label: 'Make Awesome App', important: false, done: false, edit: false }\n    ],\n    filter: 'all',\n    search: '',\n\n    itemAddFormLabel: '',\n\n    searchPanelTerm: '',\n\n    editTodoItemValue: []\n  }\n\n  onTermChange = (e) => {\n    this.setState({\n      searchPanelTerm: e.target.value\n    })\n\n    this.onSearchChange(e.target.value)\n  }\n\n\n  onLabelChange = (e) => {\n    this.setState({\n      itemAddFormLabel: e.target.value\n    })\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    this.setState({ itemAddFormLabel: '' })\n\n    this.onItemAdded(this.state.itemAddFormLabel)\n  }\n\n  onItemAdded = (label) => {\n    this.setState((state) => {\n      const item = this.createItem(label)\n      return { items: [...state.items, item] }\n    })\n  }\n\n  toggleProperty = (arr, id, propName) => {\n    const idx = arr.findIndex((item) => item.id === id)\n    const oldItem = arr[idx]\n    const value = !oldItem[propName]\n\n    const item = { ...arr[idx], [propName]: value }\n    return [\n      ...arr.slice(0, idx),\n      item,\n      ...arr.slice(idx + 1)\n    ]\n  }\n\n  onToggleDone = (id) => {\n    this.setState((state) => {\n      const items = this.toggleProperty(state.items, id, 'done')\n      return { items }\n    })\n  }\n\n  onToggleImportant = (id) => {\n    this.setState((state) => {\n      const items = this.toggleProperty(state.items, id, 'important')\n      return { items }\n    })\n  }\n\n  onDelete = (id) => {\n    this.setState((state) => {\n      const idx = state.items.findIndex((item) => item.id === id)\n      const items = [\n        ...state.items.slice(0, idx),\n        ...state.items.slice(idx + 1)\n      ]\n      return { items }\n    })\n  }\n\n  onEdit = (id) => {\n    const editObject = this.state.items.filter(item => item.id === id)\n\n   if (editObject[0].edit) {\n     this.setState( {\n       items: this.state.editTodoItemValue\n     })\n   }\n\n    this.setState((state) => {\n      const items = this.toggleProperty(state.items, id, 'edit')\n      return { items, editTodoItemValue: items }\n    })\n  }\n\n  onFilterChange = (filter) => {\n    this.setState({ filter })\n  }\n\n  onSearchChange = (search) => {\n    this.setState({ search })\n  }\n\n  createItem(label) {\n    return {\n      id: ++this.maxId,\n      label,\n      important: false,\n      done: false,\n      edit: false\n    }\n  }\n\n  filterItems(items, filter) {\n    if (filter === 'all') {\n      return items\n    } else if (filter === 'active') {\n      return items.filter((item) => (!item.done))\n    } else if (filter === 'done') {\n      return items.filter((item) => item.done)\n    }\n  }\n\n  searchItems(items, search) {\n    if (search.length === 0) {\n      return items\n    }\n\n    return items.filter((item) => {\n      return item.label.toLowerCase().indexOf(search.toLowerCase()) > -1\n    })\n  }\n\n  onEditChange = (e, id) => {\n\n  let editTodoItemValue = this.state.items.map(item => {\n    if (item.id === id) {\n      item.label = e.target.value\n    }\n    return item\n  })\n\n    this.setState({\n      editTodoItemValue\n    })\n  }\n\n  render() {\n    const { items, filter, search } = this.state\n    const doneCount = items.filter((item) => item.done).length\n    const toDoCount = items.length - doneCount\n    const visibleItems = this.searchItems(this.filterItems(items, filter), search)\n\n    return (\n      <div className='App'>\n        <AppHeader toDo={toDoCount} done={doneCount}/>\n\n        <div className='searchPanel d-flex'>\n          <SearchPanel\n            term={this.state.searchPanelTerm}\n            onTermChange={this.onTermChange}/>\n\n          <ItemStatusFilter\n            filter={filter}\n            onFilterChange={this.onFilterChange} />\n        </div>\n\n        <TodoList\n          items={ visibleItems }\n          onToggleImportant={this.onToggleImportant}\n          onToggleDone={this.onToggleDone}\n          onDelete={this.onDelete}\n          onEdit={this.onEdit}\n          onEditChange={this.onEditChange}\n          editTodoItemValue={this.state.editTodoItemValue} />\n\n        <ItemAddForm\n          label={this.state.itemAddFormLabel}\n          onLabelChange={this.onLabelChange}\n          onSubmit={this.onSubmit} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}