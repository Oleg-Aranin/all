гуглить все вопросы по react-router

каждый роутер создает объект хистори который хранит путь к текущему локейшену

yarn add react-router-dom

устанваливаеться два пкаета react-router-dom и react-router

react-router - это вся логика
react-router-dom взаимодействие с JSX комонентами

import {BrowserRouter} from 'react-router-dom' оборачиваем весь проект
const app = (
    
     <BrowserRouter>
       
       <App />
    
     </BrowserRouter>

   )

import {Route} from 'react-router-dom'

Route - регистрируем роуты компонентов
<Route path='/'  render={() => <h1>Hi</h1>}  exact component={Car} />
path - обязательный параметер - путь на который должен откликаться роут
rander - указываем что должен рендерить этот роут через колбек функцию
exact - точное соответствие пути
component - рендерит компонент который передали

import {NavLink, Link} from 'react-router-dom'
<NavLink to='/cart' exact activeClassName={class} activStyle{{object}}  to={{object}}/>
NavLink - cссылка (останавливает перезагрузку страници). добовляет класс active
exact  - добавить класс active если путь точно совпадает
activeClassName - задаем свой активынй кламм
activStyle - можем передавать объект со стилями
Когда вам нужно использовать атрибуты стиля или класса в активном <Link>, то вы можете использовать<NavLink>

можем передаватья объект в to={{ 
pathname: 'cart'   передаем путь
search: '?a=1&b=2'  параметры которые должны идти после знака вопросы (гет параметры)
hash: 'wfm-hash'    название хеша например что бы скролить до определенного элемента
}}можем передаватья объект

========================= программная навигация / динамические роуты =============================
для компонента который сделан через класс у функционального другие props
<NavLink to={{
pathname: 'cart'
}}
изпользуем this.props.history.push()
push() - принимает либо строку "/" либо объект {}
push('/')  push({pathname: '/'})
------------------------------ для функциональных--------------------------
можно в компонент передать {...this.props} и в функции получить уже пропы роутера
или второрй способ import {withRouter} from 'react-router-dom' являедся хай одэ кампонент
и оборочиваем компонент в данную функцию export default withRouter(Car)

this.props.match.params.name
<Rout path='/cars/:name'  component={CarDiteale} />  (потом подставляем место name переменную name

import {Switch} from ...    показывает один компонент который первый попался по совпадению пути

ошибак 404 ставим в Switch последним с выводом ошибки и path не прописываем (если ни один путь не совпал то попадает в этот роут)

import {Redirect} from ...  
<Redirect from={'about'} to={'/cars'} /> со Switch одыкватно не будет работать (после обновления переходить с абаут на карс)
со Switch убираем параметр from и ставим последним (если нет совпадений то делается редирект на карс)

======================защита рота =======================================
проcто рендерем или не рендорем определенный роут
если ? то рендерем : не рендарем

любой дрес "**"